snippet class class .. end
	class ${1:class_name}
		${2}
	end
snippet module module .. end
	module ${1:module_name}
		${2}
	end
snippet module module .. ClassMethods .. end
	module ${1:module_name}
		def self.included(base)
			base.extend(ClassMethods)
		end

		${2:instance_methods}

		module ClassMethods
			${3:class_methods}
		end
	end
snippet def
	def ${1:method_name}
		${2}
	end
snippet describe
	describe ${1:class} do
		${2}
	end
snippet context
	context "${1:context}" do
		${2}
	end
snippet it
	it "${1:should}" do
		${2}
	end
snippet if
	if ${1:conditions}
		${2}
	else
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet do
	do |${1}|
		${2}
	end
snippet begin
	begin
		${1}
	rescue ${2:exception}
		${3}
	ensure
		${4}
	end
snippet each
	each {|${1}| ${2} }
snippet map
	map {|${1}| ${2} }
snippet collect
	collect {|${1}| ${2} }
snippet select
	select {|${1}| ${2} }
snippet detect
	detect {|${1}| ${2} }
snippet reject
	reject {|${1}| ${2} }
